
DOCS!!
* remember to spellcheck this file
* remember to generate java doc using the javadoc tool
* remember to create user guide (text file, html or help menu) - this is for the CSR, assume no knowledge of the system, detail every step



==================================
Initial Assumptions/Requirements
==================================

* Some repetition of the instructions document here, try to re-order them a little as they are all mixed up in the original doc

- development of a traditional client server application that allows CSRs to book one or more home service contractors for their customers 
- application must interact with a non-relational binary database file (db)
- application must allow the user to specify the location for this db, and persist the locatin to disk
- application must have a front end GUI that presents the data in the database
- application must be able to list all available contractors in the database and present this using a JTable on the GUI
- application must be able to search for contractors by name and/or location
- application must be able to book one or many contractors, updating the DB accordingly
- application must be able to book and lock records in the database
- no authentication or logon is required for accessing the database (Security)

- application must have network functionality, either using RMI or sockets

- application must have 2 execution modes. Non-Networked (Also called Standalone) and Networked. Sockets or RMI must be used for networked implementation
- non-networked mode must not use loopback networking or involve any serializaton of any objects when communicating between the GUI and database, the GUI must connect to the databse within the same VM on the same machine.
- For networked mode, the GUI (client) should connect to the database via a data server on the network 
- The server must be able to deal with multiple simultaneous requests (i.e. thread safe), a locking mechanism must be implemented for this as outlined in the DBMain interface
- We are allowed to assume that at any given tiem, at most one program is accessing the database file, therefore the locking system only needs to be concerned with multiple concurrent clients of the server. If a client is trying to access a file that is locked then this client thread should not conume any CPU cycles until it is available.
- in networked mode, that application must not require the use of a HTTP server, or security manager, or dynamic class downloading.

- application GUI must only use Java Swing components
- application must be written using core Java API components rather than custom implementations
- Implementation must be easily maintained in the future and designed in a manner that future functionality enhancments may be added
- Configuration settings must be persisted between application runs
- application must be entirely contained within one JAR file

From a design point of view there are many available for this type of application. The choice of architectural pattens should be simple and easy to maintain for future enhancments. 









Actual steps i took to complete the project (rough memory)
-------------------

- Read and analzye the instructions document and highlight the requirements and areas of uncertainty (see section below)
- Create GIT repo on my machine and set up my local development environment 
- Create the project and directory structure and include the necessary files and skeleton folders
- Draw some rough ideas of what I want the GUI to look like
- Analyze the database schema and the way that the data is formatted according to the instructions, write a test application that reads this and prints the contents to the console
- Choose between Sockets or RMI for the networking component of the application 
- Read up on design patterns and possible implmentations (include ?? ) (could mention Apress book?)
- Re-read the instructions document and again addressed the areas that i am uncertain with
- Went for Java 7 training provided by Oracle as required for this certification
- Worked on examples for individual components of the application

- Started coding the database access part of the application (Back end)







==================================
Questions/Areas of uncertainty
==================================

Can a user (CSR) book multiple records? - Logically this doesn't make sense, at least not for the same client. Unless the contractors are specialists in different areas

Q. Should the list of records being displayed include those that have been already booked? Or just display available contractors? 
A. There was no mention of this in the instructiosn so I will choose the most user-friendly option and only display the list of contractors that are available. If two clients book the same contractor at the same time then of course only one will succeed. (Need testing for this record locking	!!!!)

When the client application is started should it ask for the database location every time? If we are persisting the database location the first time then we can keep reading this until the user decides to change it, this means the client app needs to provide the user an option to change the database location.
- on re-reading the spec i can see "the application MUST read the properties file". Given that this properties file will not exist until the user runs the application initially i will assume that for each time the application starts after this it will read from the file. However to allow the user to change the database location at any particular time in the future i will pre-populate the database location in the textbox entry.

Should the application have the option to select a database file after having already selected one? i.e. change to a different file? I am going to presume this is not a requirment but it could easily be added if so.

If the runme.jar is executed without any operating mode i.e. "alone" or "server" what happens?
server = the server program must run (just start the network server)
alone = indicates standalone mode (dont start the network server i.e. use local connection)
left out = "the network client and GUI must run"?? The network client and GUI are the same thing! 


Apply observer pattern? When running in client server mode with multiple clients connected, if a record is updated on the server side should this be immediatetly reflected across all clients? 

Data file format question - Start of file contains 3 items, the magic cookie, the "offset to start of record zero" - what does this mean?, and the numbers of field in each record
What is the purpose of the magic cookie? What do i do with this?
What is the offset for?

If everything is being executed on the server side and we are using internal memory cache, what do i need to serialize?

What is the manifest.mf file?
- it is a file that must be put in the META-INF dir, in the root of the jar file, indicating the class that contains the main method which is invoked when the application is executed. this main method must verify the args passed in i.e. to runme.jar and starts the program accordingly. 

Are there any limitations with the DBMain interface? i.e. saving back to the database
How to check for duplicate records? Primary/Composite key?

What happens if i run client mode before server mode? 


Presentation/Layer UI
- can i use other libraries apart from Swing? i.e. java.awt
- what does this requirement mean "expectation of future functionality enhancements"? In the intro we are told that the java app will not be a long term project, and will be ultimately replaced with a web application. (hint: use layout managers like BorderLayout, FlowLayout, GridBagLayout, this eases the introduction of new UI components)


if one client books a record, should the window in other clients update accordingly? This would require a shared model, whereas i have implmeneted in a way that each client window has its own table model





==================================
Design and Architectural choices
==================================

Requirements = Typical client server application
Note to self: "Application domain" (Domain logic) = Contractor bookings

Main "Business logic":
- Allow the user to view all records from the database
- Allow the user to search the database records with specific criteria
- Allow the user to make a booking
- Allow the user to choose location of database for both standalone mode or network mode 


Note to self: The objects that support this business process are the "business objects"


According to the background in the project specification, Bodgitt and Scarper, LLC. IT director made it clear that there will be little reuse of this Java based system, and that the long term plan is to develop a web-based booking system. Given this information it is vital that the UI layer (Java client) is easily replaced by a web interface without affecting any business logic or having to make modifications to the data access layer on the backend.

Contrary to the information above, there is a requirement in the "User Interface" section of the project specification that the "user interface should be designed with the expectation of future funcionality enhancments". I assume that these enhancments are planned before moving to a web based system otherwise there is a clear conflict of requirements here. 
Regarding the UI for the java application I plan to keep it simple and flexible, bearing in mind that components might need to be easily moved around to allow for other functionality to be added.


Possible design architectures/patterns

Thin client approach, business service is on the server side (rather than the client side) and is exposed via RMI, under this we have a thread-safe data access class. Why? Simpler and locking/transactions are all isolated on the server side which guarantees better control than the client i.e. if the client loses a connection...

First, why should i use a pattern?
-They have been proven to work time and time again
-They are expressive of the solution in which I want to solve
-They provide guidance and confidence in the development of an application

- Domain model
	This application is not complex enough for this pattern, business logic is minimal
- Transaction Scripts(DTO)
	Useful for organising business logic
- Multi layered approach
- MVC (Model View Controller) /Model Delegate Pattern
	Popular pattern for web applications where a web page (view) sends a request to a HTTP server where a controller (server side) interprets the request and handles it accordingly using business code from the model (sever side)	
- Dependency Injection


This application is composed of a Java Swing based frontend, with MVC in mind this is the view component. Swing uses what is known as Action Listeners to "pick up" user events, these listeners essentially become the controller(s), notice how the controller is now sitting on the front end of the application, rather than on the server side which would be traditional of web based applications. The model then of course is made up of server side business logic and lower level implementation i.e. Database modelling/access etc.

Mix of MV* and multi layer?

Given the wide choice of patterns to chose from,
 

Explicit design requirements  - "A clear design, such as will be readily understood by junior programmers, will be preferred to a complex one, even if the complex one is a little more efficient"



Proposed design solution:
Traditional Four-Tier Layered Architecture (Presentation, Business, Persistence, Database)
Advantages to this pattern:
- Simple design - Each layer is isolated and deals soley with each concern
- Scalable/Uncoupled - Easy to swap out database implementation for another, or modify the UI with little impact on other layers. Little dependencies..
- Maintainable, easy to troubleshoot where problems might arise and also permits teams to work/add to individual components in the future independant of each other


Database access layer
-------------------------

Initial thoughts:
DBMain interface limitations...
- no save method (create an interface with this method that extends DBmain)
- lock/unlock adds to the complexity of this class, should just be CRUD. Extract this functionliaty away?
- Interacts with the DB using ints and string arrays, very primitive.. difficut for business layer to interact with, need to use a data object.
	Based on above point, each record in the data file is accessed using a precise data schema based on byte size and locations, first thing to do is create a simple object which extracts away from this and represents in a more readable manner. a contractor/record object. 
- update method will be used for booking a record, i.e. setting a customer ID. There is no constraint on updating this again and again with a different number. 

DAO - Data access object encapsulates the data access and interacts with the database file
should be thread safe
should be designed in a way that another business service can be swapped in/out i.e. sockets over RMI etc.	

Implementing DB main interface
- All exceptions will extend a generic DataBase Exception class, this allows all throw clauses to simply throw this generic exception
- Use of a facade in the data class implementation to separate the database management and the record locking 
- Each read/write to the database file on disk involves an I/O write. This impacts performance and also means the file has to be checked everytime to ensure it is available. We could read the contents of the database into cache and write/read there, rather than performing disk I/O every time. With this approach I will need to periodically write the contents of cache back to the disk/ or when the app terminates otherwise data will be lost? 
Writing the file contents to memory shouldnt be an issue given the current size of the databse, and given the requirements there seems to be no mention relating to how big the data records might become in the future

*use MAP class for implementing the cache i.e. Map<Long, Record>
*this must be thread-safe i.e. use sychronization

LIMITATIONS
The DBMain interface does not provide a save mechansm, We can not modify the DBMain interface, i.e. adding a method to flush contents back to disk. This is one limitiation of the interface. solution = write a custom interface which extends this interface and add the custom functionality to that.
(Document how this limitation was overcome!!)


In order to book a record, the record needs to blocked then the customer ID field needs to be updated, unlocked. 
What happens if another thread acquires the record and updates the customer ID again? I can only prevent this by allowing the customer ID to only be updated once i.e. check for null at first and then block any subsquent update. This means that a record can not be unbooked. There is no mention of this in the requirements so i am going to presume this is the common use case. If in the future a record needs to be unbooked then we could allow the customer ID to be set to null by a subsequent thread.


Implement the DAO as a singleton object? 
Yes - It keeps the access to the database unique and synchronized.
No - Its not scalable, what if the application is being run on more than one VM.

RandomAccessFile object for reading writing to file?

Questions
-Do i need a primary key when writing my contractor/record data class
Answer is yes as i need to throw a duplicateKey exception when creating a new record if that record already exists

-The contractor has a field called "size" which is described as "the number of workers available when the record is booked". I am unsure whether this means whether the record can be booked n times by different customers, where n=size. If so this would mean that the same contractor can be booked across multiple clients, there is no mention of this in the requirements or anywhere else in the document. Also this contradicts the other field "owner" which is the customer who holds this record. Based on the fact that there is an "owner" field I am going to assume that there is a one to one mapping for a customer-contractor and that the size attribute simply indicates the size of the available workforce from a contractor (not that this is of any important to me)

- There is no "book" method in the DBMain interface. If i want to book a record i need to set the "owner" field for the contractor record. Should i continue to show this record when a user searchs??


Primary Key
	The DBMain has a create method for creating a new record (Contractor) in the database. Each contractor record must have a primary key to identify it's uniqueness, otherwise a DuplicateKeyException will be raised if the application tries to create the same record. 
	There are different fields for a contractor, but none of these are unique therefore i need to create a composite key i.e. one or more keys to make up a primary key. I will choose name and location for this combined with hash code for the object.



Add these in properly later...

- removed interface and added the save method as a static method to DBFIleAccess class
- mention how we are writing everything back to disk in a bulk operation
- deleted records are updated in cache and do not get written back to file, so db file will reduce in size if so
- try and save perioidically as i acknowledge data might not be updated from cache to disk in worst case scenario
- using string builder object to write record back to disk (maintaining byte size for each field)
- reading byte records, converting to string and creating subcontractor objects at the DBFileAccess layer
- cache is a singleton object, created on first instantiation of Data class
- Lock manager static methods, lockedRecords map is a class variable (Only one can exist)
- using find method to return all records








Business layer component
---------------------------

The business layer API will set on the server side (i.e. Thin client)
Define an interface with common functionality (remember to throw correct exceptions i.e. For RMI we need to throw Remote Exception)
Define any root/generic exceptions here i.e. BookingsException and remember that all other business layer exceptions should extend this i.e. A hierachy of business layer exceptions
Remember to maintain the level of abstraction i.e. in the persistence layer we use RecordNotFoundException, in the bussiness layer we should use BookingNotFoundException
There should be 2 implementations of this interface, one for client-server and the other for standalone client.

Define a DTO class to represent a Booking. This simplifies modifying string arrays from the database and instead operates at an object level. An "Adapter" class (Note to self) is used to convert from one to the other.
Remember that for client-server the booking (domain object)

Serialize the booking class?

The command line "mode" arg is passed when starting the application, we will use this to decide which implementation of the BookingServices interface should be used by the presentation layer.

The business layer is dependent on the creation of a DAO, we can use constructor dependeny injection to pass this in when instaniated 

ABSTRACTION!! maintenance/OO oriented..flexibile! The presentation layer talks to the business layer via the interface, and hence doens't need to know about the underlying implementation.
With this in mind the only way we know which implementation to use is based on the command line argument when the application starts, so it is here where we must "create" the correct business components (server or standlone) and hand this to the pres layer.



Networking - Choosing the connection protocol
------------------------------

I chose to use RMI over sockets. I have listed several advantages/disadvantes below which outline why i made this decision...

Advantages of using Sockets
------------------------------
Efficient - low network traffic and no additional layers neccessary
Can support timeouts and non-blocking I/O

Disadvantages of using Sockets
------------------------------
Complex - Need to handle all the formatting of messages between the client and server, as well as writing extra code to interpret the data. Also need to write cusom code for multi threading.




Advantages of using RMI
------------------------------
Easier and simpler approach, Reduces complexity by means of abstraction - hides a lot of the network specific code, handling of byte streams and protocol information etc.

NOTE: RMI uses sockets under the hood, the data is still being communicated via sockets. 

RMI promotes a clean and simple implementation. More maintainable, robust and flexible.

RMI decouples the client and server objects, allowing minimal impacts to the client if anything is changed on the server. i.e. Having to recompile the server code for whatever reason will not affect the client. For this particular project it is assumed that functionality will later be added to the client GUI, using RMI in this case facilitates the standalone development of this. 

Built in thread safety, multi-threading using sockets needs to be done manually


Disadvantages of using RMI
------------------------------
Slightly less efficient than Sockets because of the additional "layer" involved and because it must deal with the registry in order to communicate

Blocking I/O



Buffered Reader/ File Reader/ Input Stream Reader

Properties Class
Resoruce Bundle?

DAO object for interacting with the database
DAO abstract exceptions



GUI/Presentation Layer
-------------------------


Talk about factory pattern with regard to how we are creating the correct business component based on which dialog mode we are using. via the ok button listener (getService())

Defining an abstract class, 2 subclasses (client /standalone) etc

hierachy of configuration launchers (standalone, client, server) - good polymorphism

Considered using a resource bundle to contain all the UI properties ex. buttons/labels/jframe titles, but given the scale of this application i coded the values as fixed values instead.

properties class to read and write configuration properties

Start exception rather than services exception to give more abstraction if an error occurs



Design Patterns that I used
---------------------------
Singleton? -
MVC - 
Facade - 
DTO - The contractor class is used as a Data Transfer Object
Factory - 





Record Locking
---------------





Searching
----------
explain the flow
search action listener -> business service -> DBMain -> SubcontractorRecord "matchesCriteria" func

the DBmain interface returns true for partial matches, the user requiremnets are exact, so explain how i put in another filter at the middle tier before returning the matching records

3 separate functions to allow searching by name, location, or both

matchesCriteria implemetnation. null values return true, empty string values in crtieria list i ignore as these return true. 
Using startswith string method 